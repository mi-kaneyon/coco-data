import os
import json
import shutil
from sklearn.model_selection import train_test_split

# separate ratio
train_ratio = 0.8

# JSONファイルの読み込み/ import json file which is generated by coco-MMoptimize_adv.
with open('converted.json', 'r') as file:
    annotations = json.load(file)

# 画像パスのプレフィックスを修正(correction pic's prefix
wrong_prefix = '/data'
correct_prefix = 'data'  # coco-annotator create / prefix of data folder

for image in annotations['images']:
    if image['file_name'].startswith(wrong_prefix):
        image['file_name'] = image['file_name'].replace(wrong_prefix, correct_prefix)

# 画像のあるフォルダのパスを取得（最初の画像のパスから）/ correcting image path
image_folder = os.path.dirname(os.path.abspath(annotations['images'][0]['file_name']))

# trainとvalフォルダのパスを設定 / train and val folder setting
train_folder = os.path.join(image_folder, 'train')
val_folder = os.path.join(image_folder, 'val')

# フォルダが存在しない場合、作成 / if no directory, create new one.
os.makedirs(train_folder, exist_ok=True)
os.makedirs(val_folder, exist_ok=True)

# 画像とアノテーションの分割 separate image and json files.
images = annotations['images']
train_images, val_images = train_test_split(images, train_size=train_ratio)

# trainとvalフォルダへのコピー copy files to each directory
for image in train_images:
    shutil.copy(image['file_name'], train_folder)

for image in val_images:
    shutil.copy(image['file_name'], val_folder)

# train.jsonとval.jsonの作成 / creating separated coco json file in the execute directory
train_annotations = {key: annotations[key] for key in annotations if key != 'images'}
train_annotations['images'] = train_images

val_annotations = {key: annotations[key] for key in annotations if key != 'images'}

with open('train.json', 'w') as file:
    json.dump(train_annotations, file)

with open('val.json', 'w') as file:
    json.dump(val_annotations, file)

# サマリーの表示 result display
print(f"Train images: {len(train_images)}")
print(f"Val images: {len(val_images)}")


